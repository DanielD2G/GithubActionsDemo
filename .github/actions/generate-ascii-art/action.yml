name: 'Generate Random ASCII Art'
description: 'Genera arte ASCII aleatorio usando Python y lo inserta en el README'
author: 'Daniel'

inputs:
  readme-path:
    description: 'Ruta al archivo README'
    required: false
    default: 'README.md'
  python-version:
    description: 'Versión de Python a usar'
    required: false
    default: '3.11'

outputs:
  art-generated:
    description: 'Indica si el arte fue generado exitosamente'
    value: ${{ steps.generate.outputs.generated }}

runs:
  using: 'composite'
  steps:
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install dependencies
      shell: bash
      run: |
        echo "📦 Instalando dependencias de Python..."
        pip install matplotlib pillow numpy --quiet

    - name: Generate ASCII Art
      id: generate
      shell: bash
      run: |
        README_FILE="${{ inputs.readme-path }}"

        echo "🎨 Generando arte ASCII aleatorio..."

        python3 << 'PYTHON_SCRIPT'
        import random
        import math
        from datetime import datetime

        def generate_wave_pattern():
            """Genera un patrón de onda ASCII"""
            width = 60
            height = 10
            lines = []
            phase = random.uniform(0, 2 * math.pi)

            for y in range(height):
                line = ""
                for x in range(width):
                    value = math.sin((x / width) * 4 * math.pi + phase) * (height / 2)
                    if abs(y - height/2 - value) < 0.5:
                        line += "█"
                    else:
                        line += " "
                lines.append(line)
            return "\n".join(lines)

        def generate_spiral():
            """Genera un espiral ASCII"""
            size = 15
            grid = [[" " for _ in range(size)] for _ in range(size)]

            x, y = size // 2, size // 2
            dx, dy = 0, -1

            for i in range(size * size):
                if (-size//2 < x <= size//2) and (-size//2 < y <= size//2):
                    grid[y + size//2][x + size//2] = random.choice(["●", "○", "◆", "◇", "★"])

                if x == y or (x < 0 and x == -y) or (x > 0 and x == 1-y):
                    dx, dy = -dy, dx

                x, y = x + dx, y + dy

            return "\n".join("".join(row) for row in grid)

        def generate_random_pattern():
            """Genera un patrón aleatorio de caracteres"""
            chars = ["█", "▓", "▒", "░", "●", "○", "■", "□", "▪", "▫"]
            lines = []

            for _ in range(10):
                line = ""
                for _ in range(40):
                    if random.random() > 0.7:
                        line += random.choice(chars)
                    else:
                        line += " "
                lines.append(line)
            return "\n".join(lines)

        def generate_box_art():
            """Genera arte con cajas y bordes"""
            patterns = [
                "╔═══════════════════════════════════════════════════╗",
                "║  🎨 GitHub Actions - Arte Generado Dinámicamente  ║",
                "╠═══════════════════════════════════════════════════╣",
            ]

            # Añadir patrón central aleatorio
            for i in range(5):
                chars = random.choice([
                    ["█" * random.randint(1, 3), "░" * random.randint(1, 3)],
                    ["▓", "▒", "░"],
                    ["●", "○"],
                ])
                line = "║  " + "".join(random.choice(chars) for _ in range(20)) + "  ║"
                patterns.append(line)

            patterns.append("╚═══════════════════════════════════════════════════╝")
            return "\n".join(patterns)

        # Seleccionar un generador aleatorio
        generators = [generate_wave_pattern, generate_spiral, generate_random_pattern, generate_box_art]
        selected_generator = random.choice(generators)

        art = selected_generator()
        timestamp = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC")

        # Guardar en archivo temporal
        with open("/tmp/ascii_art.txt", "w") as f:
            f.write(f"Generado: {timestamp}\n\n")
            f.write(art)

        print(f"✅ Arte generado usando: {selected_generator.__name__}")
        PYTHON_SCRIPT

        echo "generated=true" >> $GITHUB_OUTPUT

    - name: Update README with ASCII Art
      shell: bash
      run: |
        README_FILE="${{ inputs.readme-path }}"

        # Leer el arte generado
        ART_CONTENT=$(cat /tmp/ascii_art.txt)

        # Crear archivo temporal con el contenido actualizado
        awk -v art="$ART_CONTENT" '
          /<!-- ASCII_ART_START -->/ {
            print
            print "```"
            print art
            print "```"
            skip=1
            next
          }
          /<!-- ASCII_ART_END -->/ {
            skip=0
            print
            next
          }
          !skip {print}
        ' "$README_FILE" > "${README_FILE}.tmp"

        mv "${README_FILE}.tmp" "$README_FILE"

        echo "✅ README actualizado con el arte ASCII"

    - name: Show summary
      shell: bash
      run: |
        echo "### 🎨 Arte ASCII Generado" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat /tmp/ascii_art.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
